Correct correction of variance to gain:
photons = gain*electrons
variance = photons = gain*electrons

for same number of electrons, variance ~ gain


From specpolextract_sc.py

def extract(data, var, bpm, wave, row1, row2, wmin, wmax, wbin):
    """Extract the spectra

    Parameters
    ----------
    data: _rc numpy.ndarray
        Flux data for spectra

    var: _rc numpy.ndarray
        variance data for spectra

    mask: _rc numpy.ndarray
        mask data for spectra

    wave: _rc numpy.ndarray
        wavelength map for spectra

   Returns
   -------

    """
    wave_W = np.arange(wmin, wmax, wbin)                    # _W = resampled wavelength bin edge
    Waves = wave_W.shape[0]
    row0 = int((row1+row2)/2)
    wmask_c = ((wave[row0] > wmin) & (wave[row0] < (wmax+wbin)))
    wave_C = wave[row0,wmask_c]                             # _C = original bin centers within wavelength limits
    cmin = np.where(wmask_c)[0][0]                          # column c of C=0
    dwave_C = wave_C[1:]-wave_C[:-1]
    dwave_C = np.append(dwave_C,dwave_C[-1])
    dwavpoly = np.polyfit(wave_C-wave_C.mean(),dwave_C-dwave_C.mean(),3)
    binrat_W = (np.polyval(dwavpoly,wave_W-wave_C.mean()) + dwave_C.mean())/wbin   # old/new bin widths

    C_W = np.zeros(Waves).astype(int)                       # closest column for each wavelength bin
    for W in range(Waves): C_W[W] = np.where(wave_C > (wave_W[W]))[0][0] -1

    binoff_W = (wave_W - wave_C[C_W])/(wbin*binrat_W)       # offset in columns of closest wavelength bin centers
    binfrac_dW = np.zeros((3,Waves))
    for d in (-1,0,1):                                      # contribution of nearest old bins to new one
        binfrac_dW[d+1][1:-1] = (np.minimum(wave_W[1:-1]+wbin/2.,wave_C[C_W+d][1:-1]+dwave_C[C_W+d][1:-1]/2.) -    \
            np.maximum(wave_W[1:-1]-wbin/2.,wave_C[C_W+d][1:-1]-dwave_C[C_W+d][1:-1]/2.)) / dwave_C[C_W+d][1:-1]
    binfrac_dW[binfrac_dW < 0.] = 0.

    #estimate the sky
    sky_W = np.zeros_like(wave_W)
    count = 0
    drow = row2-row1
    Rows = 2*drow
    sky_RW = np.zeros((Rows,Waves))
    R = -1
    for r in range(row1-3*drow, row1-2*drow) + range(row2+2*drow, row2+3*drow):
        xmask_c = (wmask_c & (bpm[r]==0))
        R += 1
        sky_RW[R] = np.interp(wave_W, wave[r, xmask_c], data[r, xmask_c])
        sky_W += np.interp(wave_W, wave[r, xmask_c], data[r, xmask_c])
        count += 1
    sky_W = sky_W / count

    # extract the spectra
    f_W = np.zeros_like(wave_W)
    v_W = np.zeros_like(wave_W)
    cov_W = np.zeros_like(wave_W)
    b_W = np.zeros_like(wave_W).astype(int)

    for r in range(row1, row2):
        xmask_c = (wmask_c & (bpm[r]==0))
        f_W += np.interp(wave_W, wave[r, xmask_c], data[r, xmask_c]) - sky_W
        dv_W = (binfrac_dW**2*var[r,C_W+cmin][None,:]).sum(axis=0)
        v_W += dv_W
        cov_W[:-1] += dv_W[:-1]*binfrac_dW[1,:-1]*binfrac_dW[2,1:]
        b_W += (np.interp(wave_W, wave[r, wmask_c], xmask_c[wmask_c].astype(float)) < 0.5).astype(int)

    f_W /= binrat_W
    b_W = ((b_W > 0.25*(row2-row1+1)) | (f_W == 0.) | (v_W == 0.)).astype('uint8')    # bad if 0 or > 25% spectrum bad

    return wave_W, f_W, v_W, cov_W, b_W

def write_spectra(wave, sci_ow, var_ow, covar_ow, badbin_ow, header, wbin, outfile):
    """Write out the spectra in the correct format

    """
    header['VAREXT'] = 2
    header['COVEXT'] = 3
    header['BPMEXT'] = 4
    header['CRVAL1'] = wave[0]
    header['CRVAL2'] = 0
    header['CDELT1'] = wbin
    header['CTYPE1'] = 'Angstroms'
    hduout = pyfits.PrimaryHDU(header=header)
    hduout = pyfits.HDUList(hduout)

    #what's the initial shape?
    hduout.append(pyfits.ImageHDU(data=sci_ow, header=header, name='SCI'))
    header.set('SCIEXT',1,'Extension for Science Frame',before='VAREXT')
    hduout.append(pyfits.ImageHDU(data=var_ow, header=header, name='VAR'))
    hduout.append(pyfits.ImageHDU(data=covar_ow, header=header, name='COV'))
    hduout.append(pyfits.ImageHDU(data=badbin_ow, header=header, name='BPM'))

    hduout.writeto(outfile,overwrite=True,output_verify='warn')
