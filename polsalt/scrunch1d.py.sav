#! /usr/bin/env python

# Resample data into new bins, preserving flux
# New version 150912, much faster
# New version 170504, fixed case where output bin coverage is larger than input bin coverage
# New version 170909, again fixed case where output bin coverage is larger than input bin coverage

import os, sys, time, glob, shutil
import numpy as np

def scrunch1d(input,binedge):
# new binedges are in coordinate system x where the left edge of the 0th input bin is at 0.0
    na = input.size
    nx = binedge.size - 1
    input_a = np.append(input,0)                         # deal with edge of array
#    okxbin = ((binedge>=0) & (binedge<=na))                      
    okxbin = ((binedge[1:]>0) & (binedge[:-1]<na))
    okxedge = np.zeros(binedge.size,dtype=bool)
    okxedge[:-1] |= okxbin
    okxedge[1:] |= okxbin                      
    output_x = np.zeros(nx)

# _s: subbins divided by both new and old bin edges
    ixmin,ixmax = np.where(okxedge)[0][[0,-1]]
    iamin = int(binedge[ixmin])
    iamax = int(binedge[ixmax])
    x_s = np.append(binedge[okxedge],range(int(np.ceil(binedge[ixmin])),iamax+1))
    x_s,argsort_s = np.unique(x_s,return_index=True)
    x_s = np.maximum(x_s,0.)                            # 20170909: deal with edge of array
    x_s = np.minimum(x_s,na)                            # 20170909: deal with edge of array
    ia_s = x_s.astype(int)
    ix_s = np.append(np.arange(ixmin,ixmax+1),-1*np.ones(iamax-iamin+1))[argsort_s].astype(int)
    while (ix_s==-1).sum():
        ix_s[ix_s==-1] = ix_s[np.where(ix_s==-1)[0] - 1]

#    np.savetxt("scrout_s.txt",np.vstack((ia_s,ix_s,x_s)).T,fmt="%5i %5i %10.4f")

# divide data into subbins, preserving flux
    ix_x = np.zeros(nx+1).astype(int)
    s_x = np.zeros(nx+1).astype(int)

    input_s = input_a[ia_s[:-1]]*(x_s[1:] - x_s[:-1])
    ix_x[ixmin:(ixmax+1)], s_x[ixmin:(ixmax+1)] = np.unique(ix_s,return_index=True)
    ns_x = s_x[1:] - s_x[:-1]

#    np.savetxt("scrout_x.txt",np.vstack((ix_x,np.append(ns_x,[0]),s_x)).T,fmt="%5i")

# sum it into the new bins
    for s in range(ns_x.max()):
        output_x[ns_x > s] += input_s[s_x[:nx][ns_x > s]+s]

    return output_x

#--------------------------------------------------------------------
def scrunchvar1d(var_a,binedge_x):
#   _a: input bins
#   _x: output bin edges
#   _b: output bins
# new binedges are in coordinate system x where the left edge of the 0th input bin is at 0.0
    na = var_a.size
    nx = binedge_x.size
    nb = nx - 1
    vvar_a = np.append(var_a,0)                         # deal with edge of array                  
    okxbin_b = ((binedge_x[1:]>0) & (binedge_x[:-1]<na))
    okxedge_x = np.zeros(nb+1,dtype=bool)
    okxedge_x[:-1] |= okxbin_X
    okxedge_x[1:] |= okxbin_X                      
    output_b = np.zeros(nb)

# _s: subbins divided by both new and old bin edges
    ixmin,ixmax = np.where(okxedge_x)[0][[0,-1]]
    iamin = int(binedge_x[ixmin])
    iamax = int(binedge_x[ixmax])
    x_s = np.append(binedge_x[okxedge_x],range(int(np.ceil(binedge_x[ixmin])),iamax+1))
    x_s,argsort_s = np.unique(x_s,return_index=True)
    x_s = np.maximum(x_s,0.)                            
    x_s = np.minimum(x_s,na)                            
    ia_s = x_s.astype(int)
    ix_s = np.append(np.arange(ixmin,ixmax+1),-1*np.ones(iamax-iamin+1))[argsort_s].astype(int)
    while (ix_s==-1).sum():
        ix_s[ix_s==-1] = ix_s[np.where(ix_s==-1)[0] - 1]

#--------- from old extract.  _c input columns, _W output Waves
    wave_W = np.arange(wmin, wmax, wbin)                    # _W = resampled wavelength bin edge
    wmask_c = ((wave[row0] > wmin) & (wave[row0] < (wmax+wbin)))   
    wave_C = wave[row0,wmask_c]                             # _C = original bin centers within wavelength limits
    dwave_C = wave_C[1:]-wave_C[:-1]
    dwavpoly = np.polyfit(wave_C-wave_C.mean(),dwave_C-dwave_C.mean(),3)
    binrat_W = (np.polyval(dwavpoly,wave_W-wave_C.mean()) + dwave_C.mean())/wbin   # old/new bin widths
    C_W = np.zeros(Waves).astype(int)                       # closest column for each wavelength bin
    for W in range(Waves): C_W[W] = np.where(wave_C > (wave_W[W]))[0][0] -1

    binoff_W = (wave_W - wave_C[C_W])/(wbin*binrat_W)       # offset in columns of closest wavelength bin centers  
    binfrac_dW = np.zeros((3,Waves))
    for d in (-1,0,1):                                      # contribution of nearest old bins to new one
        binfrac_dW[d+1][1:-1] = (np.minimum(wave_W[1:-1]+wbin/2.,wave_C[C_W+d][1:-1]+dwave_C[C_W+d][1:-1]/2.) -    \
            np.maximum(wave_W[1:-1]-wbin/2.,wave_C[C_W+d][1:-1]-dwave_C[C_W+d][1:-1]/2.)) / dwave_C[C_W+d][1:-1]
    binfrac_dW[binfrac_dW < 0.] = 0.

        xmask_c = (wmask_c & (bpm[r]==0))
        f_W += np.interp(wave_W, wave[r, xmask_c], data[r, xmask_c]) - sky_W
        dv_W = (binfrac_dW**2*var[r,C_W+cmin][None,:]).sum(axis=0)        
        v_W += dv_W
        cov_W[:-1] += dv_W[:-1]*binfrac_dW[1,:-1]*binfrac_dW[2,1:]
#------------

# divide data into subbins, preserving variance
    ix_x = np.zeros(nx).astype(int)
    s_x = np.zeros(nx).astype(int)

    var_s = vvar_a[ia_s[:-1]]*(x_s[1:] - x_s[:-1])**2
    ix_x[ixmin:(ixmax+1)], s_x[ixmin:(ixmax+1)] = np.unique(ix_s,return_index=True)
    ns_x = s_x[1:] - s_x[:-1]

    covar_s = ....

# sum it into the new bins
    for s in range(ns_x.max()):
        var_b[ns_x > s] += var_s[s_x[:nx][ns_x > s]+s]
        covar_b[ns_x > s] += covar_s[s_x[:nx][ns_x > s]+s]

    return var_b, covar_b

if __name__=='__main__':
    input=np.loadtxt(sys.argv[1])
    binedge=np.loadtxt(sys.argv[2])
#    for n in range(1000): scrunch1d(input,binedge)
    np.savetxt('outputfile.txt',scrunch1d(input,binedge),fmt="%14.8f")
